Description: >
    Deoga Kofi / Jenkins Servers
Parameters:
  EnvironmentName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
Resources:
      JenkinsSecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: enable all inbound traffic from port 80 and enable all outbound traffic to VpcCIDR
            GroupName: JenkinsSecurityGroup
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 81.156.228.212/32
              - IpProtocol: tcp
                FromPort: 8080
                ToPort: 8080
                CidrIp: 81.156.228.212/32
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 81.156.228.212/32
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 8080
                ToPort: 8080
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} JenkinsSecurityGroup
            VpcId: vpc-c64106be

      jenkinspipelinectb:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: jenkinspipelinectb
            AccessControl: PublicRead # visitors need to be able to access the sie
            WebsiteConfiguration: # this makes the S3 Bucket a static website/app
              IndexDocument: index.html # default object served when visiting S3 domain
              ErrorDocument: index.html # just send to app, let React handle errors and routing

      # Add a Bucket Policy that lets public visitors access the web app
      MyBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref jenkinspipelinectb # attach to bucket being created
          PolicyDocument:
            Id: MyPolicy
            Version: 2012-10-17
            Statement: # lets the public access/view the contents of your Bucket, i.e. web app
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*' # wildcard, allow all requests
                Action: 's3:GetObject'
                Resource: !Join ['', ['arn:aws:s3:::', !Ref jenkinspipelinectb, /*]]

      JenkinsEc2Instance:
          DependsOn: JenkinsSecurityGroup
          Type: AWS::EC2::Instance
          Properties:
            ImageId: ami-0d1cd67c26f5fca19
            InstanceType: t2.micro
            KeyName: s2app
            SecurityGroupIds:
              - !Ref JenkinsSecurityGroup
            SubnetId: subnet-0db61550
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install openjdk-8-jdk -y
                apt-get install tidy -y
                wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
                sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
                apt-get update
                apt-get install -y jenkins
                systemctl start jenkins
                systemctl enable jenkins
                systemctl status jenkins
                systemctl restart jenkins
                apt install -y ansible
                apt install -y python-pip
                apt-get install apache2 -y
                systemctl start apache2.service
                mkdir -p nginx_ansible/roles/nginx/tasks


            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} JenkinsEc2Instance

Outputs:
  JenkinsInstance:
      Description: Reference to the jenkins instance
      Value: !Ref JenkinsEc2Instance
      Export:
        Name: !Sub ${EnvironmentName}-JenkinsEc2Instance
  WebsiteURL:
      Value: !GetAtt jenkinspipelinectb.WebsiteURL
      Description: URL for website hosted on S3
