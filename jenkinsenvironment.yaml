Description: >
    Deoga Kofi / Jenkins Environment
Parameters:
  EnvironmentName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
Resources:
    MinimumSecurityModel:
        DependsOn: DevUser
        Type: 'AWS::IAM::Policy'
        Properties:
          PolicyName: MinimumSecurityModel
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'cloudwatch:*'
                  - 'route53:*'
                  - 'ec2:*'
                  - 'ec2:DescribeAccountAttributes'
                  - 'elasticloadbalancing:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/*'
              - Effect: Allow
                Action:
                  - 'autoscaling:Describe*'
                  - 'cloudwatch:*'
                  - "logs:*"
                  - "sns:*"
                  - "iam:GetPolicy"
                  - "iam:GetPolicyVersion"
                  - "iam:GetRole"
                Resource: '*'
              - Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*"
                Condition:
                  StringLike:
                    'iam:AWSServiceName': events.amazonaws.com
              - Effect: Allow
                Action: ec2:*
                Resource: '*'
              - Effect: Allow
                Action: elasticloadbalancing:*
                Resource: '*'
              - Effect: Allow
                Action: autoscaling:*
                Resource: '*'
              - Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: "*"
                Condition:
                  StringEquals:
                    'iam:AWSServiceName':
                      - autoscaling.amazonaws.com
                      - ec2scheduled.amazonaws.com
                      - elasticloadbalancing.amazonaws.com
                      - spot.amazonaws.com
                      - spotfleet.amazonaws.com
                      - transitgateway.amazonaws.com
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: iam:GetAccountPasswordPolicy
                Resource: '*'
              - Effect: Allow
                Action: iam:ChangePassword
                Resource: !GetAtt DevUser.Arn
              - Effect: Allow
                Action: cloudformation:*
                Resource: "*"
          Groups:
            - !Ref DevGroup
    developerrole:
        DependsOn: MinimumSecurityModel
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Principal:
                    AWS:
                    - !GetAtt DevUser.Arn
                  Action:
                    - 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/CloudWatchFullAccess
            - arn:aws:iam::aws:policy/AmazonS3FullAccess
            - arn:aws:iam::aws:policy/AmazonEC2FullAccess
            - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
          RoleName: developerrole
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} developerrole
    DevGroup:
        Type: AWS::IAM::Group
        Properties:
          GroupName: DevGroup

    DevAccessKey:
      DependsOn: DevUser
      Type: AWS::IAM::AccessKey
      Properties:
        UserName: !Ref DevUser
    DevUser:
        DependsOn: DevGroup
        Type: AWS::IAM::User
        Properties:
          UserName: devuser
          Groups:
            - DevGroup
          LoginProfile:
            Password: Password
            PasswordResetRequired: true
    DNS:
      Type: "AWS::Route53::HostedZone"
      Properties:
        HostedZoneConfig:
          Comment: 'My hosted zone for JenkinsServers'
        Name: 'jenkinsservers.com'
        VPCs:
          -
            VPCId: 'vpc-c64106be'
            VPCRegion: 'us-west-2'
        HostedZoneTags:
          -
            Key: 'Name'
            Value: 'JenkinsHostedZone'

Outputs:
  DevUser:
      Description: Reference to the dev user
      Value: !Ref DevUser
      Export:
        Name: !Sub ${EnvironmentName}-DEV-USER-ID
  DevUserAccessKeys:
      Description: AccessKeys for Dev User
      Value: !GetAtt DevAccessKey.SecretAccessKey
      Export:
        Name: !Sub ${EnvironmentName}-DEV-USER-AccessKey
